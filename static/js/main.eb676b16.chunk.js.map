{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","about","App","setMode","setAlert","message","setTimeout","aboutText","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eb676b16.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          class=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"/navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-secondary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"blog likho\",\r\n  about: \"kahani\",\r\n};\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"upper case was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText); //this is used to update the state\r\n    props.showAlert(\"Converted to Upper Case\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText); //this is used to update the state\r\n    props.showAlert(\"Converted to Lower Case\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared Text\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value); //this is used to add more text in text\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed Extra\", \"success\");\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  // text= \"new text\" //wrong way to change the state\r\n  // setText(\"new text\"); //correct way\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to UpperCase{\" \"}\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>\r\n          Convert to LowerCase{\" \"}\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text{\" \"}\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text{\" \"}\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>\r\n          Remove Extra Space{\" \"}\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} word and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// import About from \"./components/About\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //Whether dark mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"TextUtile-DarkMode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has been enabled\", \"success\");\n      document.title = \"TextUtile-LightMode\";\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"Blogging\"\n        aboutText=\"About App\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/* {/users---> component1\n          /users/home---> component2}  \n          So without exact keyword in router \n          in both the condition it will render component 1 */}\n        {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter Your Text to analyze\"\n          mode={mode}\n        />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}